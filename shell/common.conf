INFERNO_DIR="/home/inferno"
BACKUP="${INFERNO_DIR}/backup"
BACKUP_DHCP="${BACKUP}/dhcp"
BACKUP_DNS="${BACKUP}/dns"
BACKUP_RADIUS="${BACKUP}/radius"


INFERNO_PYTHON="${INFERNO_DIR}/python"
INFERNO_SHELL="${INFERNO_DIR}/shell"
INFERNO_CERTS="${INFERNO_DIR}/certs"

INFERNO_LOCK="${INFERNO_DIR}/lock"
INFERNO_LOGS="${INFERNO_DIR}/logs"

SECONDARY="${INFERNO_DIR}/scp"

function is_lock() {
  lock="${1}"
  if test -z "${lock}"; then
	return 0
  fi

  lockfile="${INFERNO_LOCK}/${lock}"

  if test -r "${lockfile}"; then
	return 1
  fi
  return 0
}


function create_lock() {
  lock="${1}"
  if test -z "${lock}"; then
	return 0
  fi
  
  is_lock "${lock}"
  if test $? -eq 1; then
  	return 0
  fi

  now=`date +"%Y-%m-%d[%H:%M:%S]"`  
  lockfile="${INFERNO_LOCK}/${lock}"
  echo "${lock}"  > "${lockfile}"
  echo "${now}"  >> "${lockfile}"

  return 1
}

function print_in_lock() {
  lock="${1}"
  msg="${2}"
  
  if test -z "${lock}"; then
	return 1
  fi

  if test -z "${msg}"; then
	return 1
  fi

  lockfile="${INFERNO_LOCK}/${lock}"
  
  is_lock "${lock}"
  if test $? -eq 1; then
  	echo "${msg}" >> ${lockfile}
  fi

  return 0
}


function delete_lock() {
  lock="${1}"
  if test -z "${lock}"; then
	return 0
  fi

  lockfile="${INFERNO_LOCK}/${lock}"
  is_lock "${lock}"
  if test $? -eq 1; then
	rm -f "${lockfile}"
	return $?
  fi
  
  return 0
}
